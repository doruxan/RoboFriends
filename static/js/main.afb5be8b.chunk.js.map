{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","item","name","email","className","src","alt","CardList","items","map","key","id","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","App","useState","searchField","setSearchField","robots","setRobots","useEffect","a","fetch","response","json","robotList","fetchRobots","filteredRobots","filter","robot","toLowerCase","includes","length","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAeeA,EAbF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACJC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MACb,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,YAA0CI,IAAI,aACtD,6BACI,4BAAKJ,GACL,2BAAIC,MCCLI,EAPE,SAAC,GAEd,OAF4B,EAAZC,MAGNC,KAAI,SAAAR,GAAI,OAAK,kBAAC,EAAD,CAAMS,IAAKT,EAAKU,GAAIA,GAAIV,EAAKU,GAAIV,KAAMA,QCSnDW,EAbG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAChB,OACI,yBAAKT,UAAU,OACX,2BACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,OACI,yBAAKC,MAAO,CAAEC,UAAY,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,I,4BCgBEK,E,kDAlBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SAAiB,wBAAItB,UAAU,MAAd,2BAEzByB,KAAKL,MAAMN,a,GAfCa,aCqCZC,G,MAhCH,WAAO,IAAD,EACwBC,mBAAS,IADjC,mBACPC,EADO,KACMC,EADN,OAEcF,mBAAS,IAFvB,mBAEPG,EAFO,KAECC,EAFD,KAIdC,qBAAU,YACW,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,8CADb,cACVC,EADU,gBAEQA,EAASC,OAFjB,OAEVC,EAFU,OAGhBN,EAAUM,GAHM,2CAAH,qDAKjBC,KACD,CAACR,IAEJ,IAEMS,EAAiBT,EAAOU,QAAO,SAAAC,GAAK,OAAIA,EAAM7C,KAAK8C,cAAcC,SAASf,EAAYc,kBAE5F,OAAKZ,EAAOc,OAGR,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWS,eATI,SAACsC,GAAD,OAAOhB,EAAegB,EAAEC,OAAOC,UAU9C,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU7C,MAAOqC,OARN,wBAAIzC,UAAU,MAAd,aCZXkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.afb5be8b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({item}) => {\n    const {name, email} = item\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${name}?200x200`} alt='RobotImg' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ items }) => {\n    // throw new Error('NOOO')\n    return (\n        items.map(item => (<Card key={item.id} id={item.id} item={item} />))\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({onSearchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='Search Robots'\n                onChange={onSearchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = ({children}) => {\n    return(\n        <div style={{ overflowY : 'scroll', border: '1px solid black', height: '500px'}}>\n            {children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render() {\n        if (this.state.hasError) return <h1 className='tc'>Oooops.That is not good</h1 >\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { useState, useEffect } from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nconst App = () => {\n    const [searchField, setSearchField] = useState('');\n    const [robots, setRobots] = useState([])\n\n    useEffect(() => {\n        const fetchRobots = async () => {\n            const response = await fetch('https://jsonplaceholder.typicode.com/users')\n            const robotList = await response.json()\n            setRobots(robotList)\n        }\n        fetchRobots()\n    }, [robots])\n\n    const onSearchChange = (e) => setSearchField(e.target.value)\n\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    if (!robots.length) return <h1 className='tc'>Loading</h1>\n\n    return (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox onSearchChange={onSearchChange} />\n            <Scroll>\n                <ErrorBoundry>\n                    <CardList items={filteredRobots} />\n                </ErrorBoundry>\n            </Scroll>\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n   <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}