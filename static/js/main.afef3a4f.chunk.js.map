{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","redux/actions/homeActions.js","redux/actionTypes.js","serviceWorker.js","redux/reducers/homeReducer.js","api/homeApi.js","api/baseApi.js","api/configureApi.js","services/CustomHttpService.js","redux/sagas/homeSaga.js","redux/rootSaga.js","redux/configureStore.js","index.js"],"names":["Card","item","name","email","className","src","alt","CardList","items","map","key","id","SearchBox","onSearchChange","aria-label","type","placeholder","onChange","Scroll","children","style","overflowY","border","marginBottom","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","App","useSelector","home","searchField","robots","getRobotsProgress","getRobotsError","robotsProgress","dispatch","useDispatch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","console","log","e","payload","target","value","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","INITIAL_STATE","HomeApi","getRobots","_doGet","setHttpService","httpService","_doDelete","endpoint","body","fetch","pureHttpMode","method","_doPut","_doPost","homeApi","robotsApi","customHttpService","setConfig","setToken","token","options","a","fullApiPath","API_PATH","headers","fetchOptions","JSON","stringify","_doPureFetch","_doFetch","Promise","resolve","reject","res","text","data","parseInt","status","_bodyText","err","json","errors","Array","isArray","el","msg","join","axiosPost","axios","post","getRobotsSaga","action","put","call","response","jsonBody","parse","watchHome","takeLatest","combinedReducer","combineReducers","sagaMiddleware","createSagaMiddleware","logger","createLogger","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","undefined","applyMiddleware","run","rootSaga","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.afef3a4f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({item}) => {\n    const {name, email} = item\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${name}?size=s200x200`} alt='RobotImg' />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ items }) => {\n    // throw new Error('NOOO')\n    return (\n        items.map(item => (<Card key={item.id} id={item.id} item={item} />))\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ onSearchChange }) => {\n    return (<div className='pa2' >\n        <input aria-label='Search Robots'\n            className='pa3 ba b--green bg-lightest-blue'\n            type='search'\n            placeholder='Search Robots'\n            onChange={onSearchChange} /> </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = ({children}) => {\n    return(\n        <div style={{ overflowY : 'scroll', border: '1px solid black', marginBottom:'100px'}}>\n            {children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render() {\n        if (this.state.hasError) return <h1 className='tc'>Oooops.That is not good</h1 >\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React, { useEffect } from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport {setSearchField, getRobots} from '../redux/actions/homeActions'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nconst App = () => {\n    const [searchField, robots, robotsProgress, robotsError] = useSelector(state => [\n        state.home.searchField,\n        state.home.robots,\n        state.home.getRobotsProgress,\n        state.home.getRobotsError\n    ])\n    \n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getRobots())\n    }, [])\n\n    const onSearchChange = (e) => dispatch(setSearchField(e.target.value))\n\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n    console.log('render')\n\n    if (robotsProgress) return <h1 className='tc'>Loading</h1>\n\n    return (\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox onSearchChange={onSearchChange} />\n            <button onClick={() => dispatch(getRobots())}/>\n            <Scroll>\n                <ErrorBoundry>\n                    <CardList items={filteredRobots} />\n                </ErrorBoundry>\n            </Scroll>\n        </div>\n    )\n}\n\nexport default App","import {\n    SET_SEARCH_FIELD,\n    GET_ROBOTS,\n    GET_ROBOTS_PROGRESS,\n    GET_ROBOTS_SUCCESS,\n    GET_ROBOTS_FAIL,\n} from \"../actionTypes\";\n\nexport const setSearchField = (text) => ({\n    type: SET_SEARCH_FIELD,\n    payload: text\n})\n\nexport const getRobots = () => ({ type: GET_ROBOTS })\nexport const getRobotsProgress = () => ({ type: GET_ROBOTS_PROGRESS })\nexport const getRobotsSuccess = (robots) => ({ type: GET_ROBOTS_SUCCESS, payload: robots })\nexport const getRobotsFail = (errorText) => ({ type: GET_ROBOTS_FAIL, payload: errorText })\n","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD'\n\nexport const GET_ROBOTS = 'GET_ROBOTS'\nexport const GET_ROBOTS_PROGRESS = 'GET_ROBOTS_PROGRESS'\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS'\nexport const GET_ROBOTS_FAIL = 'GET_ROBOTS_FAIL'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    SET_SEARCH_FIELD,\n    GET_ROBOTS_PROGRESS,\n    GET_ROBOTS_SUCCESS,\n    GET_ROBOTS_FAIL\n} from \"../actionTypes\";\n\nconst INITIAL_STATE = {\n    searchField: '',\n    getRobotsProgress: false,\n    robots: [],\n    getRobotsError: ''\n}\n\nexport default (state = INITIAL_STATE, action = {}) => {\n    const { type, payload } = action;\n\n    if (type === SET_SEARCH_FIELD) {\n        return {\n            ...state,\n            searchField: payload\n        }\n    }\n\n    if (type === GET_ROBOTS_PROGRESS) {\n        return {\n            ...state,\n            getRobotsProgress: true,\n            robots: [],\n            getRobotsError: ''\n\n        }\n    }\n\n    if (type === GET_ROBOTS_SUCCESS) {\n        return {\n            ...state,\n            getRobotsProgress: false,\n            robots: payload,\n            getRobotsError: ''\n        }\n    }\n\n    if (type === GET_ROBOTS_FAIL) {\n        return {\n            ...state,\n            getRobotsProgress: false,\n            robots: [],\n            getRobotsError: payload\n        }\n    }\n\n    return state\n\n}\n","import BaseApi from \"./baseApi\";\n\nexport default class HomeApi extends BaseApi {\n    constructor(){\n        super()\n    }\n\n    getRobots = () => {\n        return this._doGet(\"/users\");\n    };\n}","/**\n * API çağrılarını yazdığımız sınıf adı.\n */\n\nexport default class BaseApi {\n  httpService;\n\n  setHttpService = httpService => {\n    this.httpService = httpService;\n  };\n\n  // DELETE request\n  _doDelete = (endpoint, body) => {\n    return this.httpService.fetch({\n      pureHttpMode: true,\n      method: \"delete\",\n      body,\n      endpoint\n    });\n  };\n\n  // PUT request\n  _doPut = (endpoint, body) => {\n    return this.httpService.fetch({\n      pureHttpMode: true,\n      method: \"put\",\n      body,\n      endpoint\n    });\n  };\n\n  // POST request\n  _doPost = (endpoint, body) => {\n    console.log(\"BODY\", body);\n    return this.httpService.fetch({\n      pureHttpMode: true,\n      method: \"post\",\n      body,\n      endpoint\n    });\n  };\n\n  // GET request\n  _doGet = endpoint => {\n    return this.httpService.fetch({\n      pureHttpMode: true,\n      method: \"get\",\n      endpoint\n    });\n  };\n}\n","import HomeApi from \"./homeApi\";\nimport BaseApi from \"./baseApi\";\nimport CustomHttpService from \"../services/CustomHttpService\";\n\n// const baseApi = new BaseApi();\nconst homeApi = new HomeApi();\n\nconst robotsApi = {\n  ...homeApi\n}\nconst customHttpService = new CustomHttpService();\n\ncustomHttpService.setConfig({\n  API_PATH: 'https://jsonplaceholder.typicode.com'\n});\n\nconsole.log('Configure Api')\n\nrobotsApi.setHttpService(customHttpService);\n\nexport default robotsApi;\n","import axios from \"axios\";\n// import { getAccessToken } from \"../services/storage\";\n\nexport default class CustomHttpService {\n  config;\n  token;\n\n  setConfig = config => {\n    this.config = config;\n  };\n\n  setToken = token => {\n    this.token = token;\n  };\n\n  fetch = async options => {\n    let fullApiPath = this.config.API_PATH + options.endpoint;\n    let body = options.body || {};\n    let method = options.method || \"get\";\n    let headers = options.headers || {};\n\n    let fetchOptions = {\n      method,\n      headers: {\n        ...headers\n      }\n    };\n\n    if (method == \"post\" || method == \"put\" || method == \"delete\") {\n      fetchOptions.body = JSON.stringify(body);\n    }\n\n    if (options.pureHttpMode) {\n      return this._doPureFetch(fullApiPath, fetchOptions);\n    }\n\n    return this._doFetch(fullApiPath, fetchOptions);\n  };\n\n  _doPureFetch = (fullApiPath, fetchOptions) => {\n    return new Promise((resolve, reject) => {\n      console.log('full api path', fullApiPath)\n      console.log('full api path', fetchOptions)\n      fetch(fullApiPath, fetchOptions)\n        .then(res => {\n          res.text().then(data => {\n            console.log(res)\n            if (parseInt(res.status / 100, 10) !== 2) {\n              console.log('reject')\n              reject({\n                ...res,\n                _bodyText: data\n              })\n            }\n            else{\n              console.log('resolve')\n              resolve({\n                ...res,\n                _bodyText: data\n              });}\n          });\n        })\n        .catch(err => reject(err));\n    });\n  };\n\n  _doFetch = (fullApiPath, fetchOptions) => {\n    return new Promise((resolve, reject) => {\n      fetch(fullApiPath, fetchOptions)\n        .then(res => {\n          res.json().then(data => {\n            // if (!fullApiPath.includes('/login') && parseInt(res.status, 10) === 401) return NavigationService.navigate(SCREEN_NAMES.LoginScreen);\n            if (parseInt(res.status / 100, 10) !== 2) {\n              const { errors, error } = data;\n              if (errors && Array.isArray(errors)) reject(errors.map(el => el.msg).join(\"\\n\"));\n              else if (error) reject(error);\n            } else resolve(data);\n          });\n        })\n        .catch(err => reject(err));\n    });\n  };\n\n  axiosPost = options => {\n    let fullApiPath = `${this.config.API_PATH}${options.endpoint}`;\n    let body = options.body || {};\n\n    return axios.post(fullApiPath, body);\n  };\n}\n","import { put, call } from 'redux-saga/effects'\nimport robotsApi from '../../api/configureApi'\nimport { getRobotsSuccess, getRobotsFail, getRobotsProgress } from '../actions/homeActions'\n\nexport function* getRobotsSaga(action) {\n    try {\n        yield put(getRobotsProgress())\n        const response = yield call(robotsApi.getRobots)\n        const jsonBody = JSON.parse(response._bodyText)\n        yield put(getRobotsSuccess(jsonBody))\n    } catch (error) {\n        console.log('Error at getRobotsSaga', error)\n        const jsonBody = JSON.parse(error._bodyText)\n        yield put(getRobotsFail(jsonBody))\n    }\n}","import { takeEvery, takeLatest } from 'redux-saga/effects'\n\nimport * as $ from './actionTypes'\nimport * as home from './sagas/homeSaga'\n\n\nexport function* watchHome() {\n    yield takeLatest($.GET_ROBOTS, home.getRobotsSaga)\n}","import {createStore, combineReducers, applyMiddleware, compose} from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createLogger } from 'redux-logger'\n\nimport home from \"./reducers/homeReducer\";\n\nimport * as rootSaga from \"./rootSaga\";\n\nconst combinedReducer = combineReducers({\n  home\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === \"RESET_APP\") {\n    state = undefined;\n  }\n  return combinedReducer(state, action);\n};\n\nconst sagaMiddleware = createSagaMiddleware();\nconst logger = createLogger()\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware, logger)));\n\nsagaMiddleware.run(rootSaga.watchHome);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport store from './redux/configureStore'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}